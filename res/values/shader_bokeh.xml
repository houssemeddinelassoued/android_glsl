<?xml version="1.0" encoding="utf-8"?>
<resources>

    <string name="shader_bokeh_vertex">
		attribute vec4 aPosition;
		attribute vec2 aTextureCoord;
		varying vec2 vTextureCoord;
		
		void main() {
			gl_Position = aPosition;
			vTextureCoord = aTextureCoord;
		}
    </string>
    
    <string name="shader_bokeh_in_fragment">
	    precision mediump float;
  		uniform float uPower;
  		uniform sampler2D sTexture0;
        varying vec2 vTextureCoord;
        
        void main() {
        	gl_FragColor = texture2D(sTexture0, vTextureCoord);
        	
        	float A = 3.0;
        	float fLen = 2.0;
        	float fPlane = 20.0;
        	float zNear = 1.0;
        	float zFar = 20.0;
        	
        	float cocScale = (A * fLen * fPlane * (zFar- zNear)) / ((fPlane - fLen) * zNear *zFar);
        	float cocBias = (A * fLen * (zNear - fPlane)) / ((fPlane + fLen) * zNear);
        	gl_FragColor.a = abs(gl_FragColor.a * cocScale + cocBias);
        	gl_FragColor.a = clamp(gl_FragColor.a, 1.0 / 256.0, 1.0);
        	
        	gl_FragColor.rgb = pow(gl_FragColor.rgb, vec3(uPower));
        	gl_FragColor.rgb *= gl_FragColor.a;
        }
    </string>
    
    <string name="shader_bokeh_out_fragment">
	    precision mediump float;
  		uniform float uInvPower;
  		uniform sampler2D sTexture0;
        varying vec2 vTextureCoord;
        
        void main() {
        	gl_FragColor = texture2D(sTexture0, vTextureCoord);
        	gl_FragColor.rgb /= gl_FragColor.a;
        	gl_FragColor.rgb = pow(gl_FragColor.rgb, vec3(uInvPower));
        }
    </string>
    
    <string name="shader_bokeh1_fragment">
	    precision mediump float;
		uniform int uSteps;
  		uniform sampler2D sTexture0;
		uniform vec2 uDelta0;
		varying vec2 vTextureCoord;
		
		void main() {
			gl_FragColor = vec4(0.0);
			float coc0 = texture2D(sTexture0, vTextureCoord).a;
			
			float weightSum = 0.0;			
			vec2 delta0 = vec2(uDelta0) * (coc0 / float(uSteps));
			vec2 textureCoord0 = vTextureCoord + delta0 * 0.5;
			vec4 color0;
			for (int t = 0; t &lt;= uSteps; ++t) {
				color0 = texture2D(sTexture0, textureCoord0);
				gl_FragColor += color0 * color0.a;
				weightSum += color0.a;
				textureCoord0 += delta0;
			}
			gl_FragColor /= weightSum;
		}
    </string>
    
    <string name="shader_bokeh2_fragment">
	    precision mediump float;
		uniform int uSteps;
		uniform sampler2D sTexture0;
		uniform sampler2D sTexture1;
		uniform vec2 uDelta0;
		varying vec2 vTextureCoord;
		
		void main() {
			gl_FragColor = vec4(0.0);
			float coc0 = texture2D(sTexture0, vTextureCoord).a;
			
			float weightSum = 0.0;			
			vec2 delta0 = vec2(uDelta0) * (coc0 / float(uSteps));
			vec2 textureCoord0 = vTextureCoord + delta0 * 0.5;
			vec4 color0;
			for (int t = 0; t &lt;= uSteps; ++t) {
				color0 = texture2D(sTexture0, textureCoord0);
				gl_FragColor += color0 * color0.a;
				weightSum += color0.a;
				textureCoord0 += delta0;
			}
			gl_FragColor /= weightSum;
			gl_FragColor = (gl_FragColor + texture2D(sTexture1, vTextureCoord)) * 0.5;
		}
    </string>
    
    <string name="shader_bokeh3_fragment">
	    precision mediump float;
		uniform int uSteps;
		uniform sampler2D sTexture0;
		uniform sampler2D sTexture1;
		uniform vec2 uDelta0;
		uniform vec2 uDelta1;
		varying vec2 vTextureCoord;
		
		void main() {
			gl_FragColor = vec4(0.0);
			float coc0 = texture2D(sTexture0, vTextureCoord).a;
			float coc1 = texture2D(sTexture1, vTextureCoord).a;
			
			float weightSum = 0.0;			
			vec2 delta0 = vec2(uDelta0) * (coc0 / float(uSteps));
			vec2 delta1 = vec2(uDelta1) * (coc1 / float(uSteps));
			vec2 textureCoord0 = vTextureCoord + delta0 * 0.5;
			vec2 textureCoord1 = vTextureCoord + delta1 * 0.5;
			
			vec4 color0, color1;
			for (int t = 0; t &lt;= uSteps; ++t) {
				color0 = texture2D(sTexture0, textureCoord0);
				gl_FragColor += color0 * color0.a;
				weightSum += color0.a;
				textureCoord0 += delta0;
				
				color1 = texture2D(sTexture1, textureCoord1);
				gl_FragColor += color1 * color1.a;
				weightSum += color1.a;
				textureCoord1 += delta1;
			}
			gl_FragColor /= weightSum;
		}
    </string>
    
</resources>
