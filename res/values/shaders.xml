<?xml version="1.0" encoding="utf-8"?>
<resources>
    
    <string name="shader_render_scene_vs">
        uniform mat4 uMVPMatrix;
        
        attribute vec4 aPosition;
        attribute vec4 aColor;
        
        varying vec4 vPos;
        varying vec4 vColor;
        
        void main() {
            gl_Position = uMVPMatrix * aPosition;
            vPos = gl_Position;
            vPos.xy *= 0.5;
            vColor = aColor;
        }
    </string>
    <string name="shader_render_scene_fs">
        precision mediump float;
        uniform sampler2D sTexture;
        varying vec4 vPos;
        varying vec4 vColor;
        
        void main() {
            vec2 pos = (vPos.xy / vPos.w) + 0.5;
            vec2 lightning = texture2D(sTexture, pos).rg;
            
            const float ambient = 0.3;
            float ambientPlusDiffuse = mix(ambient, 1.0, lightning.r);
            float specular = lightning.g;
            const vec4 white = vec4(1.0);
            
            gl_FragColor = vColor * ambientPlusDiffuse;
			gl_FragColor = mix(gl_FragColor, white, specular);
			gl_FragColor.a = vPos.z / vPos.w;
        }
    </string>
    <string name="shader_render_light_vs">
        uniform mat4 uMVMatrix;
        uniform mat4 uMVPMatrix;
        uniform mat4 uNormalMatrix;
        uniform vec4 uLightPos;
        
        attribute vec4 aPosition;
        attribute vec4 aNormal;
        
        varying vec4 vPos;
        varying vec4 vNormal;
        varying vec4 vLightDir;
        varying vec4 vEyeVec;
        varying float vInvDist;
        
        void main() {
            gl_Position = uMVPMatrix * aPosition;
            vPos = gl_Position;
            vPos.xy *= 0.5;
            
            vec4 mvPos = uMVMatrix * aPosition;
            vLightDir = vec4(uLightPos.xyz - mvPos.xyz, 0.0);
            vEyeVec = vec4(-(mvPos.xyz), 0.0);
            vNormal = vec4((uNormalMatrix * aNormal).xyz, 0.0);
            vInvDist = inversesqrt(length(vLightDir));
        }
    </string>
    <string name="shader_render_light_fs">
        precision mediump float;
        uniform sampler2D sTexture;
        varying vec4 vPos;
        varying vec4 vNormal;
        varying vec4 vLightDir;
        varying vec4 vEyeVec;
        varying float vInvDist;
        
        void main() {
            vec2 pos = (vPos.xy / vPos.w) + 0.5;
            gl_FragColor = texture2D(sTexture, pos);
            
            vec4 normal = normalize(vNormal);
            vec4 light = normalize(vLightDir);
            float lambert = dot(normal, light);
            if (lambert > 0.0) {
                gl_FragColor.r += lambert * vInvDist;
                vec4 eye = normalize(vEyeVec);
                vec4 reflection = reflect(-light, normal);
                gl_FragColor.g += pow(max(dot(reflection, eye), 0.0), 2.0) * vInvDist;
            }
        }
    </string>
    
    <string name="shader_filter_vs">
        attribute vec4 aPosition;
        varying vec2 vTextureCoord;
        
        void main() {
            gl_Position = aPosition;
            vTextureCoord = (gl_Position.xy + 1.0) * 0.5;
        }
    </string>
    <string name="shader_filter_blend_fs">
        precision mediump float;
        uniform sampler2D sTexture0;
        uniform sampler2D sTexture1;
        varying vec2 vTextureCoord;
        
        void main() {
            vec4 colSrc0 = texture2D(sTexture0, vTextureCoord);
            vec4 colSrc1 = texture2D(sTexture1, vTextureCoord);
            gl_FragColor = mix(colSrc1, colSrc0, colSrc0.a);
        }
    </string>
    <string name="shader_filter_bokeh_in_fs">
        precision mediump float;
        uniform sampler2D sTexture0;
        varying vec2 vTextureCoord;
        
        void main() {
            gl_FragColor = texture2D(sTexture0, vTextureCoord);
            
            float A = 3.0;
            float fLen = 2.0;
            float fPlane = 20.0;
            float zNear = 1.0;
            float zFar = 20.0;
            
            float cocScale = (A * fLen * fPlane * (zFar- zNear)) / ((fPlane - fLen) * zNear *zFar);
            float cocBias = (A * fLen * (zNear - fPlane)) / ((fPlane + fLen) * zNear);
            gl_FragColor.a = abs(gl_FragColor.a * cocScale + cocBias);
            gl_FragColor.a = clamp(gl_FragColor.a, 1.0 / 256.0, 1.0);
            gl_FragColor.rgb *= gl_FragColor.a;
        }
    </string>
    <string name="shader_filter_bokeh_out_fs">
        precision mediump float;
        uniform sampler2D sTexture0;
        uniform sampler2D sTexture1;
        varying vec2 vTextureCoord;
        
        void main() {
            vec4 colSrc0 = texture2D(sTexture0, vTextureCoord);
            colSrc0.rgb /= colSrc0.a;
            vec4 colSrc1 = texture2D(sTexture1, vTextureCoord);
            gl_FragColor = mix(colSrc1, colSrc0, colSrc0.a);
        }
    </string>
    <string name="shader_filter_bokeh1_fs">
        precision mediump float;
        uniform int uSteps;
        uniform sampler2D sTexture0;
        uniform vec2 uDelta0;
        varying vec2 vTextureCoord;
        
        void main() {
            gl_FragColor = vec4(0.0);
            float coc0 = texture2D(sTexture0, vTextureCoord).a;
            
            float weightSum = 0.0;            
            vec2 delta0 = vec2(uDelta0) * (coc0 / float(uSteps));
            vec2 textureCoord0 = vTextureCoord + delta0 * 0.5;
            vec4 color0;
            for (int t = 0; t &lt;= uSteps; ++t) {
                color0 = texture2D(sTexture0, textureCoord0);
                gl_FragColor += color0 * color0.a;
                weightSum += color0.a;
                textureCoord0 += delta0;
            }
            gl_FragColor /= weightSum;
        }
    </string>
    <string name="shader_filter_bokeh2_fs">
        precision mediump float;
        uniform int uSteps;
        uniform sampler2D sTexture0;
        uniform sampler2D sTexture1;
        uniform vec2 uDelta0;
        varying vec2 vTextureCoord;
        
        void main() {
            gl_FragColor = vec4(0.0);
            float coc0 = texture2D(sTexture0, vTextureCoord).a;
            
            float weightSum = 0.0;            
            vec2 delta0 = vec2(uDelta0) * (coc0 / float(uSteps));
            vec2 textureCoord0 = vTextureCoord + delta0 * 0.5;
            vec4 color0;
            for (int t = 0; t &lt;= uSteps; ++t) {
                color0 = texture2D(sTexture0, textureCoord0);
                gl_FragColor += color0 * color0.a;
                weightSum += color0.a;
                textureCoord0 += delta0;
            }
            gl_FragColor /= weightSum;
            gl_FragColor = (gl_FragColor + texture2D(sTexture1, vTextureCoord)) * 0.5;
        }
    </string>
    <string name="shader_filter_bokeh3_fs">
        precision mediump float;
        uniform int uSteps;
        uniform sampler2D sTexture0;
        uniform sampler2D sTexture1;
        uniform vec2 uDelta0;
        uniform vec2 uDelta1;
        varying vec2 vTextureCoord;
        
        void main() {
            gl_FragColor = vec4(0.0);
            float coc0 = texture2D(sTexture0, vTextureCoord).a;
            float coc1 = texture2D(sTexture1, vTextureCoord).a;
            
            float weightSum = 0.0;            
            vec2 delta0 = vec2(uDelta0) * (coc0 / float(uSteps));
            vec2 delta1 = vec2(uDelta1) * (coc1 / float(uSteps));
            vec2 textureCoord0 = vTextureCoord + delta0 * 0.5;
            vec2 textureCoord1 = vTextureCoord + delta1 * 0.5;
            
            vec4 color0, color1;
            for (int t = 0; t &lt;= uSteps; ++t) {
                color0 = texture2D(sTexture0, textureCoord0);
                gl_FragColor += color0 * color0.a;
                weightSum += color0.a;
                textureCoord0 += delta0;
                
                color1 = texture2D(sTexture1, textureCoord1);
                gl_FragColor += color1 * color1.a;
                weightSum += color1.a;
                textureCoord1 += delta1;
            }
            gl_FragColor /= weightSum;
        }
    </string>
    <string name="shader_filter_copy_fs">
        precision mediump float;
        uniform sampler2D sTexture0;
        varying vec2 vTextureCoord;
        
        void main() {
            gl_FragColor = texture2D(sTexture0, vTextureCoord);
        }
    </string>
    
</resources>