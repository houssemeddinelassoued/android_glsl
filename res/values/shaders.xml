<?xml version="1.0" encoding="utf-8"?>
<resources>

	<string name="shader_vertex__">
		uniform mat4 uMVPMatrix;
		attribute vec4 aPosition;
		attribute vec2 aTextureCoord;
		varying vec2 vTextureCoord;
		
		void main() {
			gl_Position = uMVPMatrix * aPosition;
			vTextureCoord = aTextureCoord;
		}
    </string>

	<string name="shader_fragment__">
		precision mediump float;
		varying vec2 vTextureCoord;
        uniform sampler2D sTexture;
        
        void main() {
			gl_FragColor = texture2D(sTexture, vTextureCoord);
		}	
    </string>
    
    <string name="shader_vertex">
		uniform mat4 uViewMatrix;
		uniform mat4 uProjectionMatrix;
		
		uniform mat4 uRotationMatrix;
		uniform vec3 uTranslateVector;
		uniform float uScaleFloat;
		
		attribute vec4 aPosition;
		attribute vec3 aColor;
		attribute vec4 aNormal;
		
		varying vec3 vColor;
		
		void main() {
			vec4 position = uRotationMatrix * aPosition;
			
			position.x *= uScaleFloat;
			position.y *= uScaleFloat;
			position.z *= uScaleFloat;
			
			position.x += uTranslateVector.x;
			position.y += uTranslateVector.y;
			position.z += uTranslateVector.z;
			
			gl_Position = uProjectionMatrix * uViewMatrix * position;
			
			vec4 rotNormal = /* uViewMatrix */ uRotationMatrix * aNormal;
			rotNormal.w = 0.0;
			rotNormal = normalize(rotNormal);
			vColor = aColor;
			vColor.r *= rotNormal.z;
			vColor.g *= rotNormal.z;
			vColor.b *= rotNormal.z;
		}
    </string>
    
    <string name="shader_fragment">
        precision mediump float;
        varying vec3 vColor;
        
        void main() {
			gl_FragColor = vec4(vColor, 1.0);
		}
    </string>    
    
</resources>
