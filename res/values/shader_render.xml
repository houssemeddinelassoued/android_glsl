<?xml version="1.0" encoding="utf-8"?>
<resources>

    <string name="shader_render_scene_vs">
        uniform mat4 uMVPMatrix;
        
        attribute vec3 aPosition;
        attribute vec3 aColor;
        
        varying vec4 vPos;
        varying vec4 vColor;
        
        void main() {
            gl_Position = uMVPMatrix * vec4(aPosition, 1.0);
            vPos = gl_Position;
            vPos.xy *= 0.5;
            vColor.rgb = aColor;
            vColor.a = gl_Position.z / gl_Position.w;            
        }
    </string>
    <string name="shader_render_scene_fs">
        precision mediump float;
        uniform sampler2D sTexture;
        varying vec4 vPos;
        varying vec4 vColor;
        
        void main() {
            vec2 pos = (vPos.xy / vPos.w) + 0.5;
            vec2 lightning = texture2D(sTexture, pos).rg;
            
            const float ambient = 0.3;
            float diffuse = lightning.r;
            float specular = lightning.g * 0.5;
            
            gl_FragColor.rgb = mix(vec3(0.0), vColor.rgb, min(ambient + diffuse, 1.0));
			gl_FragColor.rgb = mix(gl_FragColor.rgb, vec3(1.0), specular);
			gl_FragColor.a = vColor.a;
        }
    </string>
    <string name="shader_render_light_vs">
        uniform mat4 uMVMatrix;
        uniform mat4 uMVPMatrix;
        uniform mat4 uNormalMatrix;
        uniform vec3 uLightPos;
        
        attribute vec3 aPosition;
        attribute vec3 aNormal;
        
        varying vec4 vPos;
        varying vec2 vColor;
        
        void main() {
            gl_Position = uMVPMatrix * vec4(aPosition, 1.0);
            vec4 mvPos = uMVMatrix * vec4(aPosition, 1.0);
            
            vec3 vertexNormal = (uNormalMatrix * vec4(aNormal, 0.0)).xyz;
            vertexNormal = normalize(vertexNormal);
            vec3 lightNormal = uLightPos - mvPos.xyz;
            lightNormal = normalize(lightNormal);
            vec3 reflectionNormal = reflect(-lightNormal, vertexNormal);
            reflectionNormal = normalize(reflectionNormal);
            
            vColor.r = dot(vertexNormal, lightNormal);
            vColor.g = dot(reflectionNormal, vec3(0.0, 0.0, 1.0));
            vColor = clamp(vColor, 0.0, 1.0);
            vColor.g = pow(vColor.g, 8.0);
            
            vPos = gl_Position;
            vPos.xy *= 0.5;
        }
    </string>
    <string name="shader_render_light_fs">
        precision mediump float;
        uniform sampler2D sTexture;
        varying vec4 vPos;
        varying vec2 vColor;
        
        void main() {
            vec2 pos = (vPos.xy / vPos.w) + 0.5;
            gl_FragColor = texture2D(sTexture, pos);
            gl_FragColor.rg += vColor;
        }
    </string>

</resources>