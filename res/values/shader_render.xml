<?xml version="1.0" encoding="utf-8"?>
<resources>

    <string name="shader_render_scene_vs">
        uniform mat4 uMVPMatrix;
        
        attribute vec4 aPosition;
        attribute vec4 aColor;
        
        varying vec4 vPos;
        varying vec4 vColor;
        
        void main() {
            gl_Position = uMVPMatrix * aPosition;
            vPos = gl_Position;
            vPos.xy *= 0.5;
            vColor = aColor;
        }
    </string>
    <string name="shader_render_scene_fs">
        precision mediump float;
        uniform sampler2D sTexture;
        varying vec4 vPos;
        varying vec4 vColor;
        
        void main() {
            vec2 pos = (vPos.xy / vPos.w) + 0.5;
            vec2 lightning = texture2D(sTexture, pos).rg;
            
            const float ambient = 0.3;
            float ambientPlusDiffuse = mix(ambient, 1.0, lightning.r);
            float specular = lightning.g;
            const vec4 white = vec4(1.0);
            
            gl_FragColor = vColor * ambientPlusDiffuse;
			gl_FragColor = mix(gl_FragColor, white, specular);
			gl_FragColor.a = vPos.z / vPos.w;
        }
    </string>
    <string name="shader_render_light_vs">
        uniform mat4 uMVMatrix;
        uniform mat4 uMVPMatrix;
        uniform mat4 uNormalMatrix;
        uniform vec4 uLightPos;
        
        attribute vec4 aPosition;
        attribute vec4 aNormal;
        
        varying vec4 vPos;
        varying vec4 vNormal;
        varying vec4 vLightDir;
        varying vec4 vEyeVec;
        varying float vInvDist;
        
        void main() {
            gl_Position = uMVPMatrix * aPosition;
            vPos = gl_Position;
            vPos.xy *= 0.5;
            
            vec4 mvPos = uMVMatrix * aPosition;
            vLightDir = vec4(uLightPos.xyz - mvPos.xyz, 0.0);
            vEyeVec = vec4(-(mvPos.xyz), 0.0);
            vNormal = vec4((uNormalMatrix * aNormal).xyz, 0.0);
            vInvDist = inversesqrt(length(vLightDir));
        }
    </string>
    <string name="shader_render_light_fs">
        precision mediump float;
        uniform sampler2D sTexture;
        varying vec4 vPos;
        varying vec4 vNormal;
        varying vec4 vLightDir;
        varying vec4 vEyeVec;
        varying float vInvDist;
        
        void main() {
            vec2 pos = (vPos.xy / vPos.w) + 0.5;
            gl_FragColor = texture2D(sTexture, pos);
            
            vec4 normal = normalize(vNormal);
            vec4 light = normalize(vLightDir);
            float lambert = dot(normal, light);
            if (lambert > 0.0) {
                gl_FragColor.r += lambert * vInvDist;
                vec4 eye = normalize(vEyeVec);
                vec4 reflection = reflect(-light, normal);
                gl_FragColor.g += pow(max(dot(reflection, eye), 0.0), 2.0) * vInvDist;
            }
        }
    </string>

</resources>