<?xml version="1.0" encoding="utf-8"?>
<resources>

    <string name="shader_render_scene_vs">
        uniform mat4 uMVPMatrix;
        
        attribute vec4 aPosition;
        attribute vec4 aColor;
        
        varying vec4 vPos;
        varying vec4 vColor;
        
        void main() {
            gl_Position = uMVPMatrix * aPosition;
            vPos = gl_Position;
            vPos.xy *= 0.5;
            vColor = aColor;
        }
    </string>
    <string name="shader_render_scene_fs">
        precision mediump float;
        uniform sampler2D sTexture;
        varying vec4 vPos;
        varying vec4 vColor;
        
        void main() {
            vec2 pos = (vPos.xy / vPos.w) + 0.5;
            vec2 lightning = texture2D(sTexture, pos).rg;
            
            const float ambient = 0.3;
            float ambientPlusDiffuse = mix(ambient, 1.0, lightning.r);
            float specular = lightning.g * 0.5;
            const vec4 white = vec4(1.0);
            
            gl_FragColor = vColor * ambientPlusDiffuse;
			gl_FragColor = mix(gl_FragColor, white, specular);
			gl_FragColor.a = vPos.z / vPos.w;
        }
    </string>
    <string name="shader_render_light_vs">
        uniform mat4 uMVMatrix;
        uniform mat4 uMVPMatrix;
        uniform mat4 uNormalMatrix;
        uniform vec4 uLightPos;
        
        attribute vec4 aPosition;
        attribute vec4 aNormal;
        
        varying vec4 vPos;
        varying vec2 vColor;
        
        void main() {
            gl_Position = uMVPMatrix * aPosition;
            vec4 mvPos = uMVMatrix * aPosition;
            
            vec4 vertexNormal = uNormalMatrix * aNormal;
            vertexNormal = normalize(vec4(vertexNormal.xyz, 0.0));
            vec4 lightNormal = uLightPos - mvPos;
            lightNormal = normalize(vec4(lightNormal.xyz, 0.0));
            vec4 reflectionNormal = reflect(-lightNormal, vertexNormal);
            reflectionNormal = normalize(reflectionNormal);
            
            vColor.r = dot(vertexNormal, lightNormal);
            vColor.g = dot(reflectionNormal, vec4(0.0, 0.0, 1.0, 0.0));
            vColor = clamp(vColor, 0.0, 1.0);
            vColor.g = pow(vColor.g, 8.0);
            
            vPos = gl_Position;
            vPos.xy *= 0.5;
        }
    </string>
    <string name="shader_render_light_fs">
        precision mediump float;
        uniform sampler2D sTexture;
        varying vec4 vPos;
        varying vec2 vColor;
        
        void main() {
            vec2 pos = (vPos.xy / vPos.w) + 0.5;
            gl_FragColor = texture2D(sTexture, pos);
            gl_FragColor.rg += vColor;
        }
    </string>

</resources>